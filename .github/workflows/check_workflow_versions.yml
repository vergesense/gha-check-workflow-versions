---
name: check workflow versions
on:
  pull_request:
    types: [opened]

jobs:
  build:
    name: check version
    runs-on: ubuntu-latest
    steps:
      - name: set-env-vars
        run: |
          echo 'REPO_NAME=github-actions' >> $GITHUB_ENV
          echo 'FILE_NAME=terraform-ci' >> $GITHUB_ENV
      - id: ci
        uses: pozetroninc/github-action-get-latest-release@master
        with:
          owner: vergesense
          repo: "${{ env.REPO_NAME }}"
          excludes: prerelease, draft
      - id: output_version
        run: |
          echo "version is ${{ steps.ci.outputs.release }}"
          echo "::set-output name=WORKFLOW_VERSION::${{ steps.ci.outputs.release }}"
      - uses: actions/setup-python@v2
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml packaging
      - uses: actions/checkout@v2
      - uses: jannekem/run-python-script-action@v1
        id: script
        with:
          fail-on-error: false
          script: |
            import yaml
            import os
            from packaging import version
            os.listdir()
            latest_release_version = "${{ steps.output_version.outputs.WORKFLOW_VERSION }}"
            with open('./.github/workflows/ci.yml','r') as file:
                file_contents = yaml.safe_load(file)

            url = file_contents['jobs']["${{ env.FILE_NAME }}"]['uses']
            stuff = url.split("/")[4]

            workflow_name = stuff.split("@")[0]
            current_release_version = stuff.split("@")[1]

            print("latest_release_version",latest_release_version,"current_release_version",current_release_version)

            is_latest_release = version.parse(latest_release_version) <= version.parse(current_release_version)

            if is_latest_release:
                print("Currently using latest release version.")
            else:
                print("Newer release available:",latest_release_version)
      - name: Print errors
        if: steps.script.outputs.error == 'true'
        run: |
          printenv "SCRIPT_STDOUT"
          printenv "SCRIPT_STDERR"
        env:
          SCRIPT_STDOUT: ${{ steps.script.outputs.stdout }}
          SCRIPT_STDERR: ${{ steps.script.outputs.stderr }}
      - name: 'Comment PR'
        uses: actions/github-script@v5
        if: contains(steps.script.outputs.stdout, 'Newer release available')
        with:
          github-token: ${{ secrets.DEVOPS_GITHUB_MACHINE_PAT }}
          script: |
            github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: "Newer version available: ${{ steps.output_version.outputs.WORKFLOW_VERSION }} \r\n \
            https://github.com/vergesense/${{ env.REPO_NAME }}"
            })
