---
name: check workflow version
on:
  workflow_call:

jobs:
  build:
    name: check workflow latest major version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 16
      - run: npm install js-yaml
      - id: get_latest_release_version
        uses: actions/github-script@v5
        with:
          script: |
            const yaml = require('js-yaml')
            const fs = require('fs')
            var workflow_versions = {}
            var outdated_workflows = []
            var files = fs.readdirSync('.github/workflows/');

            for (const file_name of files) {
              data = yaml.load(fs.readFileSync(`.github/workflows/${file_name}`, 'utf8'))
              job_keys = Object.keys(data['jobs'])

              for (const element of job_keys) {
                if (typeof data['jobs'][element]['uses'] == 'undefined') {
                  console.log(`data['jobs'][${job_keys}]['uses']`+' is undefined, skipping...')
                  continue
                }
                owner = data['jobs'][element]['uses'].split('/')[0]
                repo = data['jobs'][element]['uses'].split('/')[1]
                var releases  = await github.rest.repos.listReleases({
                  owner: owner,
                  repo: repo,
                })
                releases = releases.data
                releases = releases.filter(x => x.prerelease != true)
                releases = releases.filter(x => x.draft != true)
                latest_major_release = releases[0].tag_name.split(".")[0]
                current_version = data['jobs'][element]['uses'].split('/')[4].split('@')[1]
                workflow_versions[element] = {'latest_major': latest_major_release, 'current_major': current_version}

                if (workflow_versions[element]['latest_major_release'] != workflow_versions[element]['current_version']) {
                  console.log(element+'version mismatch, adding to outdated_workflows array')
                  outdated_workflows.push({ [element] : workflow_versions['check-workflow-version']})
                }
              }
            }
            console.log('workflow versions')
            console.log(workflow_versions)
            console.log('outdated_workflows')
            console.log(outdated_workflows)

            if (outdated_workflows.length > 0) {
                github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `Version mismatch detected: \r\n \
                ${JSON.stringify(outdated_workflows,null,2).replace(/[{}]/g, "").replace(/[\[\]']+/g,'')}
                `
              })
            }
